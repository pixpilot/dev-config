# This file is MIT licensed. See LICENSE in the repository.
#
# DISCLAIMER:
# This workflow is a community-developed tool and is not affiliated with, endorsed by, or officially supported by GitHub or the CodeQL team.
# It is provided as-is for public use.
# This workflow should not be considered an official GitHub or CodeQL product.
# Use at your own discretion.
#
# This workflow:
# - Runs CodeQL analysis on a repository
# - Scans for security and quality issues
# - Automatically creates a GitHub issue for EACH new finding
# - Attaches the specific SARIF finding data to each issue
# - Is reusable and can be called from other workflows
#
# How it works:
# - Runs CodeQL analysis for the specified language.
# - Generates a SARIF report with security and quality findings.
# - Processes the SARIF file and for each result:
#   - Deduplicates findings using a hash of its rule, location, and message.
#   - Creates a GitHub issue for each new finding, labeled 'codeql-finding'.
#   - Attaches the specific SARIF result for that finding in a collapsible section.
#   - Skips open issues and respects closed ones (does not reopen).
# - Can be called from other workflows using 'workflow_call'.
#
# ------------------------------------------------------------

name: Reusable CodeQL Issue Maker

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language to scan'
        required: true
        type: string
        default: 'javascript'
      qls-profile:
        description: 'The CodeQL QLS profile to use (e.g., security-and-quality, security-extended)'
        required: false
        type: string
        default: 'security-and-quality'
    # Define secrets the calling workflow must provide
    secrets:
      token:
        description: 'GITHUB_TOKEN for creating issues'
        required: true

jobs:
  codeql-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CodeQL CLI
        id: initialize
        uses: github/codeql-action/init@v3
        with:
          # Use the language from the workflow inputs
          languages: ${{ inputs.language }}

      - name: Create CodeQL Database
        run: |
          ${{ steps.initialize.outputs.codeql-path }} database create codeql-db --language=${{ inputs.language }}

      - name: Analyze with CodeQL CLI
        run: |
          ${{ steps.initialize.outputs.codeql-path }} database analyze codeql-db --ram=4000 --format=sarif-latest --output=results.sarif ${{ inputs.language }}-${{ inputs.qls-profile }}.qls

      - name: Process SARIF and Create Issues
        uses: actions/github-script@v7
        with:
          # Use the token passed in from the secrets
          github-token: ${{ secrets.token }}
          script: |
            const fs = require('fs');
            const crypto = require('crypto');
            const sarifPath = 'results.sarif';

            if (!fs.existsSync(sarifPath)) {
              console.log('No SARIF file found. Clean scan.');
              return;
            }

            const sarif = JSON.parse(fs.readFileSync(sarifPath, 'utf8'));
            if (!sarif.runs || sarif.runs.length === 0) {
              console.log('No runs found in SARIF file.');
              return;
            }

            const { data: allIssues } = await github.rest.issues.listForRepo({
              ...context.repo,
              state: 'all',
              labels: 'codeql-finding'
            });

            for (const run of sarif.runs) {
              if (!run.results) {
                continue;
              }

              for (const result of run.results) {
                const ruleId = result.ruleId;
                const msg = result.message.text;
                const partialFingerprints = JSON.stringify(result.partialFingerprints);

                const findingHash = crypto.createHash('md5')
                  .update(`${ruleId}|${partialFingerprints}|${msg}`)
                  .digest('hex')
                  .substring(0, 8);

                const title = `CodeQL Finding: ${ruleId} [${findingHash}]`;

                let locationsList = '';
                if (result.locations) {
                  for (const loc of result.locations) {
                    const locFile = loc.physicalLocation.artifactLocation.uri;
                    const locLine = loc.physicalLocation.region.startLine;
                    const locMessage = loc.message ? ` - ${loc.message.text}` : '';
                    locationsList += `- **File:** \`${locFile}\` **Line:** ${locLine}${locMessage}\n`;
                  }
                }

                const resultJson = JSON.stringify(result, null, 2);

                // CORRECTED METHOD: Build the body from an array to fix YAML indentation issues
                // and ensure proper Markdown rendering.
                const body = [
                  `## ðŸš¨ Security Alert: ${ruleId}`,
                  `<strong>Message:</strong> ${msg}`,
                  `<strong>Finding ID:</strong> <code>${findingHash}</code>`,
                  '---',
                  '### Vulnerability Locations',
                  locationsList,
                  '---',
                  '<details>',
                  '<summary>Click to view SARIF finding details</summary>',
                  '',
                  '```json',
                  resultJson,
                  '```',
                  '</details>',
                  '',
                  '---',
                  '*This issue was automatically generated by a custom CodeQL workflow.*'
                ].join('\n\n');

                const existingIssue = allIssues.find(issue => issue.title === title);

                if (existingIssue) {
                  if (existingIssue.state === 'closed') {
                    console.log(`Issue "${title}" was previously closed. Respecting user decision - not reopening.`);
                  } else {
                    console.log(`Issue "${title}" already exists and is open. Skipping.`);
                  }
                } else {
                  console.log(`Creating new issue: "${title}"`);
                  await github.rest.issues.create({
                    ...context.repo,
                    title,
                    body,
                    labels: ['codeql-finding']
                  });
                }
              }
            }

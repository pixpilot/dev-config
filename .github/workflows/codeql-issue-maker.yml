# This workflow:
# - Runs CodeQL analysis on a repository
# - Scans for security and quality issues
# - Automatically creates GitHub issues for each finding
# - Is reusable and can be called from other workflows
#
# How it works:
# - Runs CodeQL analysis for the specified language.
# - Generates a SARIF report with security and quality findings.
# - Processes the SARIF file and:
#   - Deduplicates findings using a hash of rule, location, and message.
#   - Creates a GitHub issue for each new finding, labeled 'codeql-finding'.
#   - Skips open issues and respects closed ones (does not reopen).
# - Can be called from other workflows using 'workflow_call'.
#
# Usage example:
# jobs:
#   code-analysis:
#     uses: pixpilot/dev-config/.github/workflows/codeql-issue-maker.yml@main
#     with:
#       language: 'javascript' # or your target language
#     secrets:
#       token: ${{ secrets.GITHUB_TOKEN }}
#
# Note: GitHub's built-in code scanning (CodeQL) is free for public and enterprise repositories
# and is much better for security, as it integrates with the GitHub Security UI and provides advanced features.
# Prefer using GitHub's native code scanning when possible.
#
# This workflow is an alternative for free code scanning and will create issues for vulnerabilities found,
# but it does NOT integrate with the GitHub Security UI.
#
# ------------------------------------------------------------

name: Reusable CodeQL Issue Maker

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language to scan'
        required: true
        type: string
        default: 'javascript'
    # Define secrets the calling workflow must provide
    secrets:
      token:
        description: 'GITHUB_TOKEN for creating issues'
        required: true

jobs:
  codeql-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CodeQL CLI
        id: initialize
        uses: github/codeql-action/init@v3
        with:
          # Use the language from the workflow inputs
          languages: ${{ inputs.language }}

      - name: Create CodeQL Database
        run: |
          ${{ steps.initialize.outputs.codeql-path }} database create codeql-db --language=${{ inputs.language }}

      - name: Analyze with CodeQL CLI
        run: |
          ${{ steps.initialize.outputs.codeql-path }} database analyze codeql-db --format=sarif-latest --output=results.sarif ${{ inputs.language }}-security-and-quality.qls

      - name: Process SARIF and Create Issues
        uses: actions/github-script@v7
        with:
          # Use the token passed in from the secrets
          github-token: ${{ secrets.token }}
          script: |
            const fs = require('fs');
            const crypto = require('crypto');
            const sarifPath = 'results.sarif';

            if (!fs.existsSync(sarifPath)) {
              console.log('No SARIF file found. Clean scan.');
              return;
            }

            const sarif = JSON.parse(fs.readFileSync(sarifPath, 'utf8'));
            if (!sarif.runs || !sarif.runs[0].results) {
              console.log('No results found in SARIF file.');
              return;
            }

            const { data: allIssues } = await github.rest.issues.listForRepo({
              ...context.repo,
              state: 'all',
              labels: 'codeql-finding'
            });

            for (const result of sarif.runs[0].results) {
              const ruleId = result.ruleId;
              const msg = result.message.text;
              const locationsString = JSON.stringify(result.locations);
              const findingHash = crypto.createHash('md5')
                .update(`${ruleId}|${locationsString}|${msg}`)
                .digest('hex')
                .substring(0, 8);
              const title = `CodeQL Finding: ${ruleId} [${findingHash}]`;
              let locationsList = '';
              if (result.locations) {
                for (const loc of result.locations) {
                  const locFile = loc.physicalLocation.artifactLocation.uri;
                  const locLine = loc.physicalLocation.region.startLine;
                  const locMessage = loc.message ? ` - ${loc.message.text}` : '';
                  locationsList += `- **File:** \`${locFile}\` **Line:** ${locLine}${locMessage}\n`;
                }
              }
              const body = `
              ## ðŸš¨ Security Alert: ${ruleId}
              <strong>Message:</strong> ${msg}
              <strong>Finding ID:</strong> <code>${findingHash}</code>
              ---
              ### Vulnerability Locations
              ${locationsList}
              ---
              *This issue was automatically generated by a custom CodeQL workflow.*
              `;
              const existingIssue = allIssues.find(issue => issue.title === title);
              if (existingIssue) {
                if (existingIssue.state === 'closed') {
                  console.log(`Issue "${title}" was previously closed. Respecting user decision - not reopening.`);
                } else {
                  console.log(`Issue "${title}" already exists and is open. Skipping.`);
                }
              } else {
                console.log(`Creating new issue: "${title}"`);
                await github.rest.issues.create({
                  ...context.repo,
                  title,
                  body,
                  labels: ['codeql-finding']
                });
              }
            }
